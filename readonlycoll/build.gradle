plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'checkstyle'
    id 'org.ec4j.editorconfig' version '0.0.3'
    id "com.github.spotbugs" version "5.0.13"
}

sourceCompatibility = '17'
compileJava.options.encoding = 'UTF-8'
group = 'io.github.readonlycoll'
version = artifactVersion

repositories {
    mavenCentral()
}

dependencies {
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'

    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.1'
}

java {
    withJavadocJar()
    withSourcesJar()
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

editorconfig {
    excludes = ["build"]
}
check.dependsOn editorconfigCheck

checkstyle {
    configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = ["suppressionFile": "${project.rootDir}/config/checkstyle/checkstyle-suppressions.xml"]
    toolVersion = "10.3"
    ignoreFailures = true
    maxErrors = 0
    maxWarnings = 0
}

spotbugs {
    toolVersion = '4.7.2'
    showStackTraces = true
    ignoreFailures = true
    reportLevel = 'high'
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jar {
    manifest {
        attributes(
            'Specification-Title': artifactName,
            'Specification-Version': artifactVersion,
            'Specification-Vendor': 'io.github.readonlycoll',
            'Implementation-Title': artifactName,
            'Implementation-Version': artifactVersion,
            'Implementation-Vendor': 'io.github.readonlycoll'
        )
    }
}

publishing {
    repositories {
        maven {
            name "OSSRH"
            url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username System.getenv("MAVEN_USER")
                password System.getenv("MAVEN_PASSWORD")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            artifactId artifactId
            from components.java
            pom {
                name = artifactName
                description = artifactDescription
                url = "https://github.com/ReadOnlyColl/ReadOnlyColl"
                licenses {
                    license {
                        name = "MIT License"
                        url = "https://github.com/ReadOnlyColl/ReadOnlyColl/blob/main/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "sanghyeon"
                        name = "Sanghyeon kim"
                        email = "thwj@me.com"
                    }
                    developer {
                        id = "abby"
                        name = "Ahbyeol kim"
                        email = "abbyinkr@gmail.com"
                    }
                }
                scm {
                    connection = "https://github.com/ReadOnlyColl/ReadOnlyColl.git"
                    developerConnection = "https://github.com/ReadOnlyColl/ReadOnlyColl.git"
                    url = "https://github.com/ReadOnlyColl/ReadOnlyColl"
                }
            }
        }
    }
}

signing {
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.maven
}
